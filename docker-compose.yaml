# SPDX-FileCopyrightText: 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

networks:
  fms-backend:
    driver: overlay
    attachable: true
  fms-vehicle:
    driver: overlay
    attachable: true

configs:
  influxdb_init.sh:
    # change to "./influxdb/init-scripts/create-covesa-token.sh" when writing to influxdb covesa-demo bucket is possible
    # file: "./influxdb/init-scripts/create-covesa-token.sh"
    file: "./influxdb/init-scripts/create-fms-token.sh"
  grafana_dashboards_from_fs.yaml:
    file: "./grafana/provisioning/dashboards/dashboards_from_filesystem.yaml"
  grafana_fms_dashboard.json:
    file: "./grafana/dashboards/FMS-Fleet.json"
  vss_overlay.json:
    file: "./spec/overlay/vss.json"

volumes:
  influxdb-data:
  influxdb-config:
  influxdb-auth:
  grafana-datasources:

services:
  influxdb:
    image: "docker.io/library/influxdb:2.7"
    container_name: "influxDB"
    healthcheck:
      test: ["CMD-SHELL", "influx ping"]
      interval: 5s
      timeout: 3s
      start_period: 5s
    cap_drop: &default-drops
    - CAP_MKNOD
    - CAP_NET_RAW
    - CAP_AUDIT_WRITE
    command: influxd
    # change to "./influxdb/covesa-demo.env" once influxdb can correctly write to bucket "covesa-demo.env"
    # env_file: "./influxdb/covesa-demo.env"
    env_file: "./influxdb/fms-demo.env"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: "setup"
      DOCKER_INFLUXDB_INIT_USERNAME: "fms-demo"
      DOCKER_INFLUXDB_INIT_PASSWORD: "fms-demo-secret"
      DOCKER_INFLUXDB_INIT_RETENTION: "1w"
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "fms-backend-admin-token"
    networks:
    - "fms-backend"
    ports:
    - "0.0.0.0:8086:8086"
    configs:
    - source: "influxdb_init.sh"
      target: "/docker-entrypoint-initdb.d/influxdb_init.sh"
    volumes:
    - type: "volume"
      source: "influxdb-data"
      target: "/var/lib/influxdb2"
    - type: "volume"
      source: "influxdb-config"
      target: "/etc/influxdb2"
    - type: "volume"
      source: "influxdb-auth"
      target: "/tmp/out"
    - type: "volume"
      source: "grafana-datasources"
      target: "/tmp/influxdb-datasources"
  databroker:
    image: "ghcr.io/eclipse/kuksa.val/databroker:0.4.1"
    container_name: "databroker"
    cap_drop: *default-drops
    networks:
    - "fms-vehicle"
    ports:
    - "127.0.0.1:55555:55556"
    configs:
    - "vss_overlay.json"
    environment:
      DATA_SOURCE: "default"
      KUKSA_DATA_BROKER_ADDR: "0.0.0.0"
      KUKSA_DATA_BROKER_PORT: "55556"
      KUKSA_DATA_BROKER_METADATA_FILE: "/vss_overlay.json"
      RUST_LOG: "info"
    # for the time being, we do not use TLS secured connections to Databroker
    command: "--insecure"
  covesa-cv-forwarder:
    image: "ghcr.io/eclipse-sdv-blueprints/fleet-management/covesa-cv-forwarder:main"
    profiles: ["covesa"]
    build: &covesa-cv-forwarder-build
      context: "./components"
      dockerfile: "Dockerfile.covesa-cv-forwarder"
    container_name: "covesa-cv-forwarder"
    cap_drop: *default-drops
    networks:
    - "fms-backend"
    - "fms-vehicle"
    depends_on:
      influxdb:
        condition: service_healthy
      databroker:
        condition: service_started
    command: "influx"
    # change to "./influxdb/covesa-demo.env" once influxdb can correctly write to bucket "covesa-demo.env"
    # env_file: "${FMS_FORWARDER_PROPERTIES_FILE:-./influxdb/covesa-demo.env}"
    env_file: "${FMS_FORWARDER_PROPERTIES_FILE:-./influxdb/fms-demo.env}"
    environment:
      WINDOW_CAPACITY: 10
      CSV_FILE_PATH: "/dist/signalsGeoTabRecording.csv"
      # change to "/etc/forwarder/covesa-demo.token" once influxdb can correctly write to bucket "covesa-demo.env"
      # INFLUXDB_TOKEN_FILE: "/etc/forwarder/covesa-demo.token"
      INFLUXDB_TOKEN_FILE: "/etc/forwarder/fms-demo.token"
      KUKSA_DATA_BROKER_URI: "http://databroker:55556"
      RUST_LOG: "${FMS_FORWARDER_LOG_CONFIG:-info,covesa_forwarder=info,influx_client=info}"
      TRUST_STORE_PATH: "${FMS_FORWARDER_TRUST_STORE_PATH:-/etc/ssl/certs/ca-certificates.crt}"
    volumes:
    - type: "volume"
      source: "influxdb-auth"
      target: "/etc/forwarder"
      read_only: true
  csv-provider-fms:
    image: "ghcr.io/eclipse/kuksa.val.feeders/csv-provider:main"
    profiles: ["fms"]
    container_name: "csv-provider-fms"
    cap_drop: *default-drops
    networks:
    - "fms-vehicle"
    depends_on:
      databroker:
        condition: service_started
    volumes:
    - "./csv-provider/signalsFmsRecording.csv:/dist/signals.csv"
    environment:
      PROVIDER_INFINITE: 1
      PROVIDER_LOG_LEVEL: "INFO"
      KUKSA_DATA_BROKER_ADDR: "databroker"
      KUKSA_DATA_BROKER_PORT: "55556"
  csv-provider-covesa:
    profiles: ["covesa"]
    image: "ghcr.io/eclipse/kuksa.val.feeders/csv-provider:main"
    container_name: "csv-provider-covesa"
    cap_drop: *default-drops
    networks:
      - "fms-vehicle"
    depends_on:
      databroker:
        condition: service_started
    volumes:
      - "./csv-provider/signalsCovesaCvRecording.csv:/dist/signals.csv"
    environment:
      PROVIDER_INFINITE: 1
      PROVIDER_LOG_LEVEL: "INFO"
      KUKSA_DATA_BROKER_ADDR: "databroker"
      KUKSA_DATA_BROKER_PORT: "55556"